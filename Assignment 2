

library(bit64)
library(data.table)
library(lfe)
library(stargazer)
library(ggplot2)

#We first load the brand and store meta data.
load("./Data/Brands.RData")
load("./Data/Stores.RData")


selected_module = 7012
model_name = "Detergents-Tide"


#Let’s assign each brand a new name using a new variable, brand_name. 
  #Call the top-ranked (according to total revenue) brand own, 
  #and the top three other “competitor” brands comp_1, comp_2, and comp_3.
  #brands[, rank := frankv(revenue, order = -1), by= product_module_code]

brands[,rank := frankv(revenue, order = -1),by = product_module_code]
brands2 <- brands[rank<=4]
brands2[rank==1, brand_name := "own"]
brands2[rank==2, brand_name := "comp_1"]
brands2[rank==3, brand_name := "comp_2"]
brands2[rank==4, brand_name := "comp_3"]

#Prepare movement data
  #Load the movement data, and—for better readability—change the variable names 
  #from units to quantity and from promo_dummy to promotion. 
  #Change the data type of the promotion variable from logical to numeric using the as.numeric function. 
  #Finally, merge the new brand_name variable with the movement table.

load("./Data/brand_move_7012_25_subsample.RData")

# NOTE - each module is in its own file - this is just 7012 for now

names(move)[which(names(move)=="units")] <- "quantity"
names(move)[which(names(move)=="promo_dummy")] <- "promotion"

move$promotion <- as.numeric(move$promotion)

setkey(brands2,product_module_code,brand_code_uc)
key(brands2)

setkey(move,brand_code_uc,store_code_uc,week_end)
key(move)

brands2 <- brands2[product_module_code==selected_module]

move2 <-merge(brands2,move,allow=TRUE)

#Remove outliers

isOutlier <- function(x, threshold_bottom, threshold_top) {
  is_outlier = rep(FALSE, times = length(x))
  median_x = median(x, na.rm = TRUE)
  is_outlier[x/median_x < threshold_bottom | x/median_x > threshold_top] = TRUE 
  return(is_outlier)
}

move2[,is_outlier := isOutlier(price,0.35,2.5),by=.(product_module_code,brand_code_uc,store_code_uc)]

#move2[,is_outlierKS := isOutlier(price,0.35,2.5),on=.(product_module_code,brand_code_uc,store_code_uc)]
#move2[,check := move2[,is_outlier]==move2[,is_outlierKS]]

move2[,threshold_bottom := median(price,na.rm=TRUE)*0.35, by=.(product_module_code,brand_code_uc,store_code_uc)]
move2[,threshold_top := median(price,na.rm=TRUE)*2.5, by=.(product_module_code,brand_code_uc,store_code_uc)]

move3 <- move2[is_outlier==FALSE]

#Reshape the movement data from long to wide format

move4 <- dcast(move3, store_code_uc + week_end ~ brand_name, 
              value.var = c("quantity", "price", "promotion"))

#Merge store information with the movement data

setkey(move4,store_code_uc,week_end)
key(move4)

setkey(stores,store_code_uc)
key(stores)

movestore <- merge(stores,move4,allow=TRUE)

#keep only stores with valid retailer code
movestore <- movestore[!is.na(retailer_code)]

# Check how many stores there are in the data.
length(unique(movestore[,store_code_uc]))

#create time trend numbering months

movestore[,year := year(week_end)]
movestore[,month := month(week_end)]
minyear = min(movestore[,year])
  
movestore[,timetrend := (year-minyear)*12+month]

# retain only complete cases

movestore = movestore[complete.cases((movestore))]


#Create histograms of own prices, and the ratios of own prices relative to the price of (separately) competitor 1, 2, and 3.

#Price histograms

ggplot(movestore, aes(x = price_own)) +
   scale_x_continuous(limits=c(0,.3)) +
    geom_histogram(binwidth = .01, color = "navyblue", fill = "lightblue1")

ggplot(movestore, aes(x = price_comp_1)) +
  scale_x_continuous(limits=c(0,.3)) +
  geom_histogram(binwidth = .01, color = "navyblue", fill = "lightblue1")

ggplot(movestore, aes(x = price_comp_2)) +
  scale_x_continuous(limits=c(0,.3)) +
  geom_histogram(binwidth = .01, color = "navyblue", fill = "lightblue1")

ggplot(movestore, aes(x = price_comp_3)) +
  scale_x_continuous(limits=c(0,.3)) +
  geom_histogram(binwidth = .01, color = "navyblue", fill = "lightblue1")

# Own price relative to competitor histograms

#centered on one to make interpretation easier

ggplot(movestore, aes(x = price_own/price_comp_1)) +
  scale_x_continuous(limits=c(-1,3)) +
  geom_histogram(binwidth = .1, color = "navyblue", fill = "lightblue1")

ggplot(movestore, aes(x = price_own/price_comp_2)) +
  scale_x_continuous(limits=c(-1,3)) +
  geom_histogram(binwidth = .1, color = "navyblue", fill = "lightblue1")

ggplot(movestore, aes(x = price_own/price_comp_3)) +
  scale_x_continuous(limits=c(-1,3)) +
  geom_histogram(binwidth = .1, color = "navyblue", fill = "lightblue1")


# Write explanation of why price variation is important for regression analysis e.g. demand estimation

"Price variation is important to regression analysis because the regression is fundamentally a tool to quantify how different variables vary
with one another. If we never observed price changes with one or more of the brands, we would have no data allowing us to understand how the variable 
are linked and the analysis would lack explanatory power."


#Estimate the models using the felm function from the lfe package (consult the corresponding notes on Canvas).
#Store the outputs in some appropriately named variables (objects).

fit1 = felm(log(1+quantity_own) ~ log(price_own), data = movestore)
fit1

fit2 = felm(log(1+quantity_own) ~ log(price_own) | store_code_uc, data = movestore)
fit2

fit3 = felm(log(1+quantity_own) ~ log(price_own) | store_code_uc + x^2, data = movestore)
fit3

fit4 = felm(log(1+quantity_own) ~ log(price_own) | store_code_uc + timetrend, data = movestore)
fit4

#Comment on the results. Does controlling for store or time fixed effects make a difference?


#Controlling for competitor prices
#Now add the competitor prices, for competitors 1, 2, and 3. Compare the results and comment on the cross-price elasticities.


#Controlling for promotions
#Now add the promotions dummies, first just for the own brand, then for all brands. Compare the results. Did controlling for promotions change the own price elasticity estimate in an expected manner?


#We will use the final model including all variables (I called it fit_promo_comp) as our preferred model. 
#Also, we save the model output object in a named file in the folder Results. 
#Make sure to create this folder in the same directory where the source R Markdown is located.


#Profitability analysis

#conitnues
